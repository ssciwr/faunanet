[project]
name = "faunanet"
requires-python = ">= 3.9"
authors=[{name = "Harald Mack", email = "harald.mack@uni-heidelberg.de"}, {name = "Inga Ulusoy", email = "inga.ulusoy@uni-heidelberg.de"}]
description = "faunanet - A bioacoustics platform for the analysis of animal sounds with neural networks based on birdnetlib"
readme ="README.md"
license={file = "LICENSE"}
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: Apache Software License",
    "Development Status :: 4 - Beta",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence", 
]
dynamic = ["version"]
dependencies = [
    "numpy", 
    "librosa", 
    "PyYAML", 
    "birdnetlib==0.15.0",
    "pooch", 
    "resampy", # for audio loading
    "platformdirs", # get cache dirs without os dependence etc
    "ffmpeg-python"
]

[project.optional-dependencies]
tensorflow   = ["tensorflow"]
tensorflow-lite =["tflite-runtime"]
dev = [
    "pytest", 
    "pytest-cov", 
    "coverage", 
    "pre-commit", 
    "pytest-mock", 
    "pandas", 
    "sphinx-rtd-theme"
]
doc = [
    "sphinx",
    "sphinx",
    "myst-parser",
    "sphinxcontrib-napoleon",
    "sphinx-rtd-theme"

]

[project.urls]
Repository = "https://github.com/ssciwr/iSparrow"
Issues = "https://github.com/ssciwr/iSparrow/issues"
Documentation = "https://isparrow.readthedocs.io/en/latest/?badge=latest"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# Tools 
[tool.pytest.ini_options]
minversion = "6.0"
addopts="-v -x"
testpaths = ["tests"] 

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = { attr = "faunanet.__version__" }

[tool.coverage.run]
branch = true
source = ["./src/faunanet"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]
fail_under = 80

[tool.coverage.html]
directory = "coverage_html_report"

[project.scripts]
faunanet = "faunanet.repl:run"